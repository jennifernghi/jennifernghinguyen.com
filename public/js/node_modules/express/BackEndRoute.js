class BackEndRoutes {
    /*
    * mysql, express, app require 
    */
    constructor(mysql, express, app, constants, body_parser) {
        'use strict';
        this._mysql = mysql
        this._express = express;
        this._app = app;
        this._body_parser = body_parser;
        this._constants = constants;
        this._API_key = this._constants.API_KEY;
        this.init();
    }
    static get connection() {
        if (this._mysql === undefined) {
            this._mysql = require('mysql');
        }

        if (this._constants === undefined) {
            this._constants = require('../../utils/CONSTANTS.js')
        }
        return this._mysql.createConnection({
            host: this._constants.DB_HOST,
            user: this._constants.DB_USERNAME,
            password: this._constants.DB_PASSWORD,
            database: this._constants.DB_NAME
        });
    }

    static get getQueries() {
        if (this._queries === undefined) {
            this._queries = require('../express/queries.js')
        }
        return this._queries;
    }
    init() {
        //tells the system that you want json to be used.
        this._app.use(this._body_parser.json());
        //tells the system whether you want to use a simple algorithm for shallow parsing (i.e. false) 
        //or complex algorithm for deep parsing that can deal with nested objects (i.e. true).
        this._app.use(this._body_parser.urlencoded({ extended: true }));
        //console.log(this._connection);
        this.setupRoutes();
    }

    setupRoutes() {
        this.projectRoutes();
        this.resumeRoutes();
    }

    responseReturn(res, statusCode, jsonResponse) {
        switch (statusCode) {
            case 200:
                res.send(jsonResponse);
                break;
            case 400:
                res.send({
                    'statusCode': statusCode,
                    'error': 'Bad Request'
                });
                break;
            case 404:
                res.send({
                    'statusCode': statusCode,
                    'error': 'Not Found'
                });
                break;
            case 500:
                res.send({
                    'statusCode': statusCode,
                    'error': 'Internal Server Error'
                });
                break;
        }
    }

    projectRoutes() {
        var self = this;
        this._app.get("/" + this._API_key + "/project", function (req, res) {
            BackEndRoutes.connection.connect();
            if (req.query.count === 'true') {
                BackEndRoutes.connection.query(BackEndRoutes.getQueries.countAllProjects, function (err, rows, fields) {
                    if (err !== null) {
                        self.responseReturn(res, res.statusCode, { 'error': err });
                    } else {
                        var num = rows[0].num_of_project;
                        self.responseReturn(res, res.statusCode, { 'num_of_project': num });
                    }
                });
            }

            if (req.query.project_id !== undefined && req.query.count === undefined) {
                BackEndRoutes.connection.query(BackEndRoutes.getQueries.project + req.query.project_id, function (err, rows, fields) {

                    if (err !== null) {
                        self.responseReturn(res, res.statusCode, { 'error': err });
                    } else {
                        var ret = {}
                        ret.project_name = rows[0].name;
                        ret.description = rows[0].description;
                        ret.start = rows[0].start;
                        ret.end = rows[0].end;
                        ret.images = [];
                        ret.skills = [];
                        ret.videos = [];
                        ret.documentations = [];

                        BackEndRoutes.connection.query(BackEndRoutes.getQueries.project_images + req.query.project_id,
                            (err, rows, fields) => {
                                if (err !== null) {
                                    self.responseReturn(res, res.statusCode, { 'error': err });
                                } else {

                                    for (var i = 0; i < rows.length; i++) {
                                        var img = {};
                                        img.link = rows[i].link;
                                        img.credit = rows[i].credit;
                                        ret.images.push(img);
                                    }

                                    BackEndRoutes.connection.query(BackEndRoutes.getQueries.project_skills + req.query.project_id,
                                        (err, rows, fields) => {
                                            if (err !== null) {
                                                self.responseReturn(res, res.statusCode, { 'error': err });
                                            } else {
                                                for (var i = 0; i < rows.length; i++) {
                                                    var skill = {};
                                                    skill.skill_name = rows[i].skill_name;
                                                    skill.skill_color = rows[i].skill_color;
                                                    ret.skills.push(skill);
                                                }


                                                BackEndRoutes.connection.query(
                                                    BackEndRoutes.getQueries.project_videos + req.query.project_id,
                                                    (err, rows, fields) => {
                                                        if (err !== null) {
                                                            self.responseReturn(res, res.statusCode, { 'error': err });
                                                        } else {
                                                            for (var i = 0; i < rows.length; i++) {
                                                                ret.videos.push(rows[i].link);
                                                            }

                                                            BackEndRoutes.connection.query(
                                                                BackEndRoutes.getQueries.project_documentations + req.query.project_id,
                                                                (err, rows, fields) => {
                                                                    if (err !== null) {
                                                                        self.responseReturn(res, res.statusCode, { 'error': err });
                                                                    } else {
                                                                        for (var i = 0; i < rows.length; i++) {
                                                                            var doc = {};
                                                                            doc.doc_title = rows[i].doc_title;
                                                                            doc.link = rows[i].link;
                                                                            ret.documentations.push(doc);
                                                                        }
                                                                        self.responseReturn(res, res.statusCode, ret);
                                                                        //res.send(ret);
                                                                    }
                                                                });
                                                        }

                                                    });
                                            }


                                        });

                                }
                            });

                    }
                });

            }

            BackEndRoutes.connection.end();
        });
    }

    resumeRoutes() {
        var self = this;
        this._app.get('/' + this._API_key + '/resume', (req, res) => {
            BackEndRoutes.connection.connect();

            BackEndRoutes.connection.query(BackEndRoutes.getQueries.resume, (err, rows, fields) => {
                if (err !== null) {
                    self.responseReturn(res, res.statusCode, { 'error': err });
                }else{
                    var ret = {};

                    ret.full_name = rows[0].full_name;
                    ret.introduction = rows[0].introduction;
                    ret.objective = rows[0].objective;
                    ret.experiences = [];
                    ret.educations = [];
                    ret.achievements = [];
                    ret.languages = [];
                    ret.resume_skills = [];
                    ret.contacts = [];
                    ret.projects = [];
                    BackEndRoutes.connection.query(BackEndRoutes.getQueries.experiences, (err, rows, fields) => {
                        if (err !== null) {
                            self.responseReturn(res, res.statusCode, { 'error': err });
                        }else{
                            for (var i = 0; i < rows.length; i++) {
                                var exp = {};
                                exp.exp_title = rows[i].exp_title;
                                exp.exp_description = rows[i].exp_description;
                                exp.start = rows[i].start;
                                exp.end = rows[i].end;
                                exp.exp_icon_link = rows[i].link;
                                exp.exp_icon_credit = rows[i].credit;
                                ret.experiences.push(exp);
                            }

                            BackEndRoutes.connection.query(BackEndRoutes.getQueries.education, (err, rows, fields) => {
                                if (err !== null) {
                                    self.responseReturn(res, res.statusCode, { 'error': err });
                                }else{
                                    for (var i = 0; i < rows.length; i++) {
                                        var edu = {};
                                        edu.school_name = rows[i].school_name;
                                        edu.degree = rows[i].degree;
                                        edu.start_term = rows[i].start_term;
                                        edu.end_term = rows[i].end_term;
                                        edu.GPA = rows[i].GPA;
                                        edu.school_icon_link = rows[i].link;
                                        edu.school_icon_credit = rows[i].credit;
                                        ret.educations.push(edu);
                                    }

                                    BackEndRoutes.connection.query(BackEndRoutes.getQueries.achievements, (err, rows, fields) => {
                                        if (err !== null) {
                                            self.responseReturn(res, res.statusCode, { 'error': err });
                                        }else{
                                            for (i in rows) {
                                                var achive = {};
                                                achive.achievement_title = rows[i].achievement_title;
                                                achive.year = rows[i].year;
                                                achive.achievement_description = rows[i].achievement_description;
                                                achive.achievement_logo = rows[i].link;
                                                achive.achievement_credit = rows[i].credit;
                                                ret.achievements.push(achive);
                                            }

                                            BackEndRoutes.connection.query(BackEndRoutes.getQueries.languages, (err, rows, fields) => {
                                                if (err !== null) {
                                                    self.responseReturn(res, res.statusCode, { 'error': err });
                                                }else{
                                                    for (i in rows) {
                                                        var lang = {};
                                                        lang.language = rows[i].language;
                                                        lang.fluency_point = rows[i].fluency_point;
                                                        lang.flag = rows[i].link;
                                                        lang.flag_credit = rows[i].credit;
                                                        ret.languages.push(lang);
                                                    }

                                                    BackEndRoutes.connection.query(BackEndRoutes.getQueries.resume_skills, (err, rows, fields) => {
                                                        if (err !== null) {
                                                            self.responseReturn(res, res.statusCode, { 'error': err });
                                                        }else{
                                                            for (i in rows) {
                                                                var skill = {};
                                                                skill.skill_name = rows[i].skill_name;
                                                                skill.skill_color = rows[i].skill_color;
                                                                skill.skill_icon = rows[i].link;
                                                                skill.icon_credit = rows[i].credit;
                                                                skill.skill_point = rows[i].skill_point;
                                                                ret.resume_skills.push(skill);
                                                            }

                                                            BackEndRoutes.connection.query(BackEndRoutes.getQueries.contacts, (err, rows, fields) => {
                                                                if (err !== null) {
                                                                    self.responseReturn(res, res.statusCode, { 'error': err });
                                                                }else{
                                                                    for (i in rows) {
                                                                        var contact = {};
                                                                        contact.contact_type = rows[i].contact_type;
                                                                        contact.contact_content = rows[i].contact_content;
                                                                        contact.contact_icon = rows[i].link;
                                                                        contact.contact_icon_credit = rows[i].credit;
                                                                        ret.contacts.push(contact);
                                                                    }

                                                                    BackEndRoutes.connection.query(BackEndRoutes.getQueries.projectsAll, (err, rows, fields) => {
                                                                        if (err !== null) {
                                                                            self.responseReturn(res, res.statusCode, { 'error': err });
                                                                        }else{
                                                                            for (i in rows) {
                                                                                //name, description, start, end
                                                                                var prj = {};
                                                                                prj.project_name = rows[i].name;
                                                                                prj.project_description = rows[i].description;
                                                                                prj.start = rows[i].start;
                                                                                prj.end = rows[i].end;
                                                                                ret.projects.push(prj);
                                                                            }
                                                                            //res.send(ret);
                                                                            self.responseReturn(res, res.statusCode, ret);
                                                                        }
                                                                    });
                                                                }

                                                            });
                                                        }

                                                    });
                                                }


                                            });
                                        }


                                    });
                            }


                            });
                        }

                    
                    });
                }

            });

            BackEndRoutes.connection.end();
        });
    }

}

module.exports = BackEndRoutes;